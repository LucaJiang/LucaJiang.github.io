{"meta":{"title":"Jiang Wenxin's blog","subtitle":"","description":"","author":"Jiangwx7","url":"https://lucajiang.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-12-02T02:13:37.834Z","updated":"2020-12-02T02:13:37.834Z","comments":false,"path":"/404.html","permalink":"https://lucajiang.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-11-15T11:54:24.728Z","updated":"2020-11-15T11:54:24.728Z","comments":false,"path":"about/index.html","permalink":"https://lucajiang.github.io/about/index.html","excerpt":"","text":"你好呀~我是蒋文馨。现就读于中山大学统计科学系。喜欢编程和羽毛球。我的微信号是jiangwx7，欢迎加我微信。"},{"title":"书单","date":"2020-11-12T01:23:50.887Z","updated":"2020-11-04T12:45:28.075Z","comments":false,"path":"books/index.html","permalink":"https://lucajiang.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-11-04T12:45:28.077Z","updated":"2020-11-04T12:45:28.077Z","comments":false,"path":"categories/index.html","permalink":"https://lucajiang.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-11-16T02:33:33.868Z","updated":"2020-11-04T12:45:28.083Z","comments":false,"path":"tags/index.html","permalink":"https://lucajiang.github.io/tags/index.html","excerpt":"","text":""},{"title":"book","date":"2020-11-12T01:22:46.000Z","updated":"2020-11-12T01:22:46.491Z","comments":true,"path":"book/index.html","permalink":"https://lucajiang.github.io/book/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-11-05T04:33:29.787Z","updated":"2020-11-04T12:45:28.082Z","comments":false,"path":"repository/index.html","permalink":"https://lucajiang.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-11-04T12:45:28.080Z","updated":"2020-11-04T12:45:28.080Z","comments":true,"path":"links/index.html","permalink":"https://lucajiang.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"OpenCV 无法读取图片：诊断及处理方法","slug":"CVimCantRead","date":"2021-03-10T08:02:57.000Z","updated":"2021-03-10T08:35:10.495Z","comments":true,"path":"2021/03/10/CVimCantRead/","link":"","permalink":"https://lucajiang.github.io/2021/03/10/CVimCantRead/","excerpt":"解决openCV图片读取相关报错","text":"解决openCV图片读取相关报错 问题描述 诊断 处理方法 问题描述使用python 3.6 openCV 4.4 时，cv2.cvtColor()报错： 123cv2.error: OpenCV(4.4.0)C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\pip-req-build-jmqlme5z\\opencv\\modules\\imgproc\\src\\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function &#39;cv::cvtColor&#39; 以及cv2.imshow()报错： 12cv2.error: C:\\projects\\opencv-python\\opencv\\modules\\highgui\\src\\window.cpp:325: error: (-215) size.width&gt;0 &amp;&amp; size.height&gt;0 in function cv::imshow 诊断使用cv2.imread()读取图片后，print(读取的图片)，观察输出结果是否为”None”。如果为”None”，说明图片根本就没读进去。需要注意的是imread没有读到图片，也不会报错。但是后续图片处理就会报错。 处理方法发现了问题是由图片读取失败导致，那就好解决了。可以按照以下步骤： 检查路径是否出错。需要注意以下两种情况： 路径中有中文-&gt;方案A； 路径中有“\\”-&gt;方案B； 检查图片是否存在。 若不存在图片，则…； 图片名包括中文-&gt;方案A； 解决方案A： 要注意，路径或图片名有中文时是不可以直接用imread的哦。可以使用以下函数： 123def cv_imread(file_path): cv_img &#x3D; cv2.imdecode(np.fromfile(file_path,dtype&#x3D;np.uint8),-1) return cv_img 代码来自：https://www.zhihu.com/question/67157462/answer/251754530 解决方案B： 如果代码中的路径有“\\”，可能会被识别为逃逸符，建议改成“\\”。","categories":[],"tags":[{"name":"ImageProcessing","slug":"ImageProcessing","permalink":"https://lucajiang.github.io/tags/ImageProcessing/"}]},{"title":"Heat Conduction Problem 高温作业服装的热传导数学模型","slug":"cumcm","date":"2020-12-26T13:24:16.000Z","updated":"2020-12-26T13:43:30.079Z","comments":true,"path":"2020/12/26/cumcm/","link":"","permalink":"https://lucajiang.github.io/2020/12/26/cumcm/","excerpt":"2018年全国大学生数学建模竞赛A题全国二等奖论文","text":"2018年全国大学生数学建模竞赛A题全国二等奖论文 2018年。那年我大二，暑假刚学了MATLAB，运用还不太熟，主要靠帮助文档。能拿奖大概是运气好，在学校图书馆找到了靠谱的文献。还有就是我的编程水平还说得过去，模型复杂点也能实现。队友也给力，聊得来。 其实，现在再看这篇论文，觉得无论是用的方法，还是写作、绘图都做得一般。不过，对于大二的学生来讲，第一次参加建模比赛就能做成这样，也算是不错了。","categories":[],"tags":[]},{"title":"识别多普勒超声图像血流信号","slug":"doppler","date":"2020-12-21T06:37:13.000Z","updated":"2020-12-23T07:23:46.807Z","comments":true,"path":"2020/12/21/doppler/","link":"","permalink":"https://lucajiang.github.io/2020/12/21/doppler/","excerpt":"利用HSV提取血流信号","text":"利用HSV提取血流信号 思路一: 直接提取RGB图像中R&gt;B和R&lt;B部分遇到的困难: 由于设备原因，部分图像偏紫色，因此很难正确识别彩色区域。 即使可以正确识别彩色区域，因图像受压缩影响，无法正确判断边界。 思路二：先提取HSV图像中高H部分，再提取RGB图像中R&gt;B和R&lt;B部分具体地，利用彩色区域和白色区域高H，先将这些区域取出。再判断R和B大小，若R&gt;B则为红色，R=B则为白色，R&lt;B为蓝色。 此时大部分图像均能正常识别。 遇到的困难: 这一方法还是会受思路一提到的第一个困难的影响，部分图像无法正常识别。 思路三：完全利用HSV来识别此时，所有图像均能正确识别。具体流程： 将图片转为HSV格式 利用亮度V和饱和度S确定彩色区域 利用H确定是红色还是蓝色 MATLAB代码： 123456789101112rgb = imread(...);imshow(rgb)hsv = rgb2hsv(rgb);v = hsv(:,:,3) &gt; 0.70;s = hsv(:,:,2) &gt; 0.15;hred = hsv(:,:,1) &lt; 0.5;hblue = hsv(:,:,1) &gt; 0.5;ind = v &amp; s;rind = ind &amp; hred;bind = ind &amp; hblue;imshow(rind)imshow(bind)","categories":[],"tags":[{"name":"ImageProcessing","slug":"ImageProcessing","permalink":"https://lucajiang.github.io/tags/ImageProcessing/"}]},{"title":"Multivariate Statistics HW","slug":"Multivariate-Statistics-HW","date":"2020-12-01T03:00:00.000Z","updated":"2020-12-01T08:20:17.645Z","comments":true,"path":"2020/12/01/Multivariate-Statistics-HW/","link":"","permalink":"https://lucajiang.github.io/2020/12/01/Multivariate-Statistics-HW/","excerpt":"Modern Multivariate Statistical Techniques部分习题解答","text":"Modern Multivariate Statistical Techniques部分习题解答 以下是中山大学2017级统计学多元统计平时作业 PCA&amp;CVA LDA CART SVM Clustering PCA&amp;CVA LDA CART SVM Clustering 另，大作业链接 https://lucajiang.github.io/2020/11/16/Kaggle-Mushroom-Dataset/","categories":[],"tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://lucajiang.github.io/tags/Statistics/"}]},{"title":"Kaggle Mushroom Dataset Analysis","slug":"Kaggle-Mushroom-Dataset","date":"2020-11-16T02:29:16.000Z","updated":"2020-12-01T08:20:30.137Z","comments":true,"path":"2020/11/16/Kaggle-Mushroom-Dataset/","link":"","permalink":"https://lucajiang.github.io/2020/11/16/Kaggle-Mushroom-Dataset/","excerpt":"中山大学2017级统计学多元统计期末作业","text":"中山大学2017级统计学多元统计期末作业 附录中的代码请联系 &#106;&#x69;&#97;&#x6e;&#103;&#x77;&#x78;&#55;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d; 获取。","categories":[],"tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://lucajiang.github.io/tags/Statistics/"}]},{"title":"基于 Framingham 数据集冠心病生存分析","slug":"FraminghamCHDSurvivalAnalysis","date":"2020-11-12T02:51:23.000Z","updated":"2020-12-01T08:20:40.219Z","comments":true,"path":"2020/11/12/FraminghamCHDSurvivalAnalysis/","link":"","permalink":"https://lucajiang.github.io/2020/11/12/FraminghamCHDSurvivalAnalysis/","excerpt":"中山大学2017级统计学生存分析期末作业","text":"中山大学2017级统计学生存分析期末作业 大作业分数：97，总分：94，排名：1。 附录中的代码请联系 &#106;&#105;&#97;&#110;&#x67;&#x77;&#x78;&#55;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d; 获取。","categories":[],"tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://lucajiang.github.io/tags/Statistics/"}]},{"title":"Detect Rectangle Mark in Medical Images","slug":"Detect-Rectangle-Mark-in-Medical-Images","date":"2020-11-11T13:32:16.000Z","updated":"2021-02-24T01:06:05.423Z","comments":true,"path":"2020/11/11/Detect-Rectangle-Mark-in-Medical-Images/","link":"","permalink":"https://lucajiang.github.io/2020/11/11/Detect-Rectangle-Mark-in-Medical-Images/","excerpt":"Detect white rectangle mark in medical images, using morphological opening and Hough transform.","text":"Detect white rectangle mark in medical images, using morphological opening and Hough transform. 中文版 readme, 点这. Content Background Method Result MATLAB Code BackgroundMedical images often have regions of interest marked by doctors. Generally speaking, before building a deep learning model, we need to manually select these areas, which is time-consuming and may introduce extra errors. This repo proposes a graphics-based method to select these areas automatically. Take this thyroid ultrasound(US) image for example. The black shadow in the middle is a thyroid nodule. The thin white box around it is a mark. We need to obtain images of areas deemed valuable by doctors and build models based on those areas. If the gray scale of the white box is stable. For example, it is a fixed value. We can easily locate the white box through a computer program. Unfortunately, in most cases, the gray scale would be affected by the background color. We generally use hough transform to detect straight lines. However, medical images often have interference elements. For example, in this case, the dividing line between the skin and muscles of the neck could be easily misjudged by the computer as part of the white box. That’s why hough transform can not be applied directly. Besides, to be honest, manual processing of this kind of images is also very laborious. Because the line is too thin. To sum up, it is difficult to detect white rectangle mark in medical images. And I failed to find a suitable way to deal with such problem on the internet or papers. So I try my best to propose my own ideas on it. In the following sections, I propose a method based on morphological operations and hough transform. BTW, I suggest that you should check it yourself after processing. Although this program works well, it could fail in some special cases. MethodIn order to apply hough transform, we need to separate white line from interference background. So, firstly, we apply morphological opening on the gray scale images. The morphological open operation is an erosion followed by a dilation, using the same structuring element for both operations. For more details, see here. Then, we can easily detect the mark in current situation (see the middle row of result). Here, I apply hough transform, but you can use whatever you want. The theory of hough transform can be found here. The core MATLAB codes of this process are 1234567891011121314151617% get gray scale imagesimg = rgb2gray(ori_img);% morphological operationsbackground = imopen(img, strel(&#x27;disk&#x27;, disk_size));sub = imsubtract(img, background);ind = sub &gt;= min_sub;imshow(ind)% hough transform[n, m] = size(ind);[H,T,R] = hough(ind);P = houghpeaks(H, 4, &#x27;threshold&#x27;, ceil(0.2*max(H(:))));lines = houghlines(ind, T, R, P, &#x27;FillGap&#x27;, FillGap_value,&#x27;MinLength&#x27;, MinLength_value);% cropping along lines... ResultThe results show as follows. CodeMATLAB code for display available at here. Packaged MATLAB code available at here. An example for the packaged code at here. Note@cxt contributues a handy modifie module, though which you can modifie images that seem wrongly recongnized. The processing of locating the point after the Hough transform could be improved. Insert try-catch exception module, for instance. But the current processing effect has reached my requirements.","categories":[],"tags":[{"name":"ImageProcessing","slug":"ImageProcessing","permalink":"https://lucajiang.github.io/tags/ImageProcessing/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-11-04T12:05:45.000Z","updated":"2020-12-02T02:14:35.782Z","comments":true,"path":"2020/11/04/hello-world/","link":"","permalink":"https://lucajiang.github.io/2020/11/04/hello-world/","excerpt":"How to use hexo","text":"How to use hexo This article is rewrite based on Hexo’s Hello world post. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new postBetween two “ is your new-post-name. Here the post name is My New Post. 1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server or 1$ hexo s Then you can view your new post at your local server. More info: Server Generate static files1$ hexo generate or 1$ hexo g More info: Generating Deploy to remote sites1$ hexo deploy or 1$ hexo d More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"ImageProcessing","slug":"ImageProcessing","permalink":"https://lucajiang.github.io/tags/ImageProcessing/"},{"name":"Statistics","slug":"Statistics","permalink":"https://lucajiang.github.io/tags/Statistics/"}]}